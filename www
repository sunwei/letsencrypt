#!/bin/bash
set -e
set -u
set -o pipefail
exec 3>&-

BASE_DIR=$(dirname $0)
SCRIPT_PATH="$( cd "${BASE_DIR}" && pwd -P )"
CERT_DIR="./cert"


for secret in "${SCRIPT_PATH}/secrets/*.env"; do source $secret; done

export WWW_ENV=stg
export LETS_ENCRYPT_WWW_LIB_PATH="${SCRIPT_PATH}/lib"
export CERT_DIR="${CERT_DIR}"

source "${LETS_ENCRYPT_WWW_LIB_PATH}/json.sh"
source "${LETS_ENCRYPT_WWW_LIB_PATH}/formatter.sh"
source "${LETS_ENCRYPT_WWW_LIB_PATH}/ssl.sh"
source "${LETS_ENCRYPT_WWW_LIB_PATH}/http.sh"
source "${LETS_ENCRYPT_WWW_LIB_PATH}/utils.sh"
source "${LETS_ENCRYPT_WWW_LIB_PATH}/letsencryptv2.sh"

FQDN=
DNSPod_HOOK="./provider/dnspod.sh"
DNSPod_RECORD_ID=

# Usage: -h, --help
# Description: Show help text
option_help() {
  printf "Usage: %s COMMAND [options...] <domain> \n\n" "${0}"
  printf "Default command: --help\n\n"

  echo "Options:"
  grep -e '^[[:space:]]*# Usage:' -e '^[[:space:]]*# Description:' -e '^option_.*()[[:space:]]*{' "${0}" | while read -r usage; read -r description; read -r option; do
    if [[ ! "${usage}" =~ Usage ]] || [[ ! "${description}" =~ Description ]] || [[ ! "${option}" =~ ^option_ ]]; then
      exit_err "Error generating help text."
    fi
    printf " %-32s %s\n" "${usage##"# Usage: "}" "${description##"# Description: "}"
  done

  printf "\n"
  echo "Commands:"
  grep -e '^[[:space:]]*# Command Usage:' -e '^[[:space:]]*# Command Description:' -e '^command_.*()[[:space:]]*{' "${0}" | while read -r usage; read -r description; read -r command; do
    if [[ ! "${usage}" =~ Usage ]] || [[ ! "${description}" =~ Description ]] || [[ ! "${command}" =~ ^command_ ]]; then
      exit_err "Error generating help text."
    fi
    printf " %-32s %s\n" "${usage##"# Command Usage: "}" "${description##"# Command Description: "}"
  done
}

# Usage: -p, --prod
# Description: Set the WWW env to production (default staging)
option_prod() {
  export WWW_ENV=prod
  _lev2_refresh_ca
}

# Command Usage: create
# Command Description: Create a new certification for domain
command_create() {
  local timestamp="$(date +%s)"

  check_msg "Init environment..."
  lev2_init

  check_msg "Apply Let's Encrypt account..."
  lev2_reg_account

  check_msg "Start new order..."
  lev2_new_order "${FQDN}"

  check_msg "Deploy dns-01 challenge to provider DNSPod..."
  lev2_build_authz
  lev2_deploy_challenge "${DNSPod_HOOK}"
  lev2_check_challenge_status "${DNSPod_HOOK}"
  lev2_valid_challenge
  lev2_clean_challenge "${DNSPod_HOOK}"

  check_msg "Sign domain ${FQDN}..."
  lev2_sign_domain "${FQDN}"

  check_msg "Produce cert..."
  lev2_produce_cert
  lev2_rename_cert "${FQDN}"

  check_msg "Done, www domain "${FQDN}" cert at: "
  echo "================"
  echo "$( cd "${BASE_DIR}/${CERT_DIR}" && pwd -P )"
  echo "================"
}

# Command Usage: renew
# Command Description: Renew certification for the domain
command_renew() {
  echo "Coming soon..."
}

# Command Usage: revoke
# Command Description: Revoke certification for the domain
command_revoke() {
  echo "Coming soon..."
}

main() {
  [[ -z "${@}" ]] && eval set -- "--help"

  local theCommand=

  set_command() {
    [[ -z "${theCommand}" ]] || exit_err "Only one command at a time!"
    theCommand="${1}"
  }

  while (( ${#} )); do
    case "${1}" in

      --help|-h)
        option_help
        exit 0
        ;;

      --prod|-p)
        option_prod
        ;;

      create|renew|revoke)
        set_command "${1}"
        ;;

      *)
        FQDN="${1}"
        ;;
    esac

    shift 1
  done

  [[ ! -z "${theCommand}" ]] || exit_err "Command not found!"
  [[ ! -z "${FQDN}" ]] || exit_err "Domain not found!"

  case "${theCommand}" in
    create) command_create;;
    renew) command_renew;;
    revoke) command_revoke;;

    *) option_help; exit 1;;
  esac
}

main "${@-}"